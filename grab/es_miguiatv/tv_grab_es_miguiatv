#!/usr/bin/perl -w

eval 'exec /usr/bin/perl -w -S $0 ${1+"$@"}'
    if 0; # not running under some shell

=pod

=head1 NAME

tv_grab_es_miguiatv - Alternative TV grabber for Spain.

=head1 SYNOPSIS

tv_grab_es_miguiatv --help

tv_grab_es_miguiatv [--config-file FILE] --configure [--gui OPTION]

tv_grab_es_miguiatv [--config-file FILE] [--output FILE] [--days N]
           [--offset N] [--quiet]

tv_grab_es_miguiatv --list-channels

tv_grab_es_miguiatv --capabilities

tv_grab_es_miguiatv --version

=head1 DESCRIPTION

Output TV listings for spanish channels from www.miguiatv.com.
Supports analogue and digital (D+) channels.

First run B<tv_grab_es_miguiatv --configure> to choose, which channels you want
to download. Then running B<tv_grab_es_miguiatv> with no arguments will output
listings in XML format to standard output.

B<--configure> Prompt for which channels,
and write the configuration file.

B<--config-file FILE> Set the name of the configuration file, the
default is B<~/.xmltv/tv_grab_es_miguiatv.conf>.  This is the file written by
B<--configure> and read when grabbing.

B<--gui OPTION> Use this option to enable a graphical interface to be used.
OPTION may be 'Tk', or left blank for the best available choice.
Additional allowed values of OPTION are 'Term' for normal terminal output
(default) and 'TermNoProgressBar' to disable the use of XMLTV::ProgressBar.

B<--output FILE> Write to FILE rather than standard output.

B<--days N> Grab N days.  The default is 3.

B<--offset N> Start N days in the future.  The default is to start
from today.

B<--quiet> Suppress the progress messages normally written to standard
error.

B<--capabilities> Show which capabilities the grabber supports. For more
information, see L<http://wiki.xmltv.org/index.php/XmltvCapabilities>

B<--version> Show the version of the grabber.

B<--help> Print a help message and exit.

=head1 SEE ALSO

L<xmltv(5)>.

=head1 AUTHOR

Alberto González (alberto@pesadilla.org) based on tv_grab_es_laguiatv from CandU and tv_grab_es from Ramon Roca.

=head1 BUGS

=cut

# 


######################################################################
# initializations

use strict;
use XMLTV::Version '$Id: tv_grab_es_miguiatv,v 1.4 2010/09/02 05:07:40 rmeden Exp $ ';
use XMLTV::Capabilities qw/baseline manualconfig cache/;
use XMLTV::Description 'Spain (miguiatv.com)';
use Getopt::Long;
use Date::Manip;
use HTML::TreeBuilder;
use HTML::Entities; # parse entities
use IO::File;
use Data::Dumper;
use Encode qw(decode_utf8 encode_utf8);


use XMLTV;
use XMLTV::Memoize;
use XMLTV::ProgressBar;
use XMLTV::Ask;
use XMLTV::Config_file;
use XMLTV::DST;
use XMLTV::Get_nice;
use XMLTV::Mode;
use XMLTV::Date;
# Todo: perhaps we should internationalize messages and docs?
use XMLTV::Usage <<END
$0: get Spanish television listings in XMLTV format
To configure: $0 --configure [--config-file FILE]
To grab listings: $0 [--config-file FILE] [--output FILE] [--days N]
        [--offset N] [--quiet]
To list channels: $0 --list-channels
To show capabilities: $0 --capabilities
To show version: $0 --version
END
  ;

# Attributes of the root element in output.
my $HEAD = { 'source-info-url'     => 'http://www.miguiatv.com/todos-los-canales.html',
	     'source-data-url'     => "http://www.miguiatv.com/todos-los-canales.html",
	     'generator-info-name' => 'XMLTV',
	     'generator-info-url'  => 'http://xmltv.org/',
	   };
		   
# Whether zero-length programmes should be included in the output.
my $WRITE_ZERO_LENGTH = 0;
my $DO_SLOWER_DESC_GET = 0;

# default language
my $LANG="es";

# Global channel_data
our @ch_all;

# debug print function
sub debug_print
{
	# my ($str) = @_;
	
	# print $str;
}


######################################################################
# get options

# Get options, including undocumented --cache option.
XMLTV::Memoize::check_argv('XMLTV::Get_nice::get_nice_aux');
my ($opt_days, $opt_offset, $opt_help, $opt_output,
    $opt_configure, $opt_config_file, $opt_gui,
    $opt_quiet, $opt_list_channels);
$opt_days  = 3; # default
$opt_offset = 0; # default
$opt_quiet  = 0; # default
GetOptions('days=i'        => \$opt_days,
           'offset=i'      => \$opt_offset,
           'help'          => \$opt_help,
           'configure'     => \$opt_configure,
           'config-file=s' => \$opt_config_file,
           'gui:s'         => \$opt_gui,
           'output=s'      => \$opt_output,
           'quiet'         => \$opt_quiet,
           'list-channels' => \$opt_list_channels
	  )
  or usage(0);
die 'number of days must not be negative'
  if (defined $opt_days && $opt_days < 0);
usage(1) if $opt_help;

XMLTV::Ask::init($opt_gui);

my $mode = XMLTV::Mode::mode('grab', # default
			     $opt_configure => 'configure',
			     $opt_list_channels => 'list-channels',
			    );

# File that stores which channels to download.
my $config_file
  = XMLTV::Config_file::filename($opt_config_file, 'tv_grab_es_miguiatv', $opt_quiet);

my @config_lines; # used only in grab mode
if ($mode eq 'configure') {
    XMLTV::Config_file::check_no_overwrite($config_file);
}
elsif ($mode eq 'grab') {
    @config_lines = XMLTV::Config_file::read_lines($config_file);
}
elsif ($mode eq 'list-channels') {
    # Config file not used.
}
else { die }

# Whatever we are doing, we need the channels data.
my %channels; # sets @ch_all
my @channels;
my %urls;
######################################################################
# write configuration

if ($mode eq 'configure') {
	%channels = get_channels();
    
	open(CONF, ">$config_file") or die "cannot write to $config_file: $!";
        
	# Ask about getting descs
	my $getdescs = ask_boolean("Do you want to get descriptions (very slow)");
	warn("cannot read input, using default")
	  if not defined $getdescs;

	print CONF "getdescriptions ";
	print CONF "yes\n" if $getdescs;
	print CONF "no\n" if not $getdescs;

    # Ask about each channel.
    my @chs = sort keys %channels;
    my @names = map { $channels{$_} } @chs;
    my @qs = map { "Add channel $_?" } @names;
    my @want = ask_many_boolean(1, @qs);
    foreach (@chs) {
	my $w = shift @want;
	warn("cannot read input, stopping channel questions"), last
	  if not defined $w;
	# No need to print to user - XMLTV::Ask is verbose enough.

	# Print a config line, but comment it out if channel not wanted.
	print CONF '#' if not $w;
	my $name = shift @names;
	print CONF "channel $_ $name\n";
	# TODO don't store display-name in config file.
    }

    close CONF or warn "cannot close $config_file: $!";
    say("Finished configuration.");

    exit();
}


# Not configuration, we must be writing something, either full
# listings or just channels.
#
die if $mode ne 'grab' and $mode ne 'list-channels';

# Options to be used for XMLTV::Writer.
my %w_args;
if (defined $opt_output) {
    my $fh = new IO::File(">$opt_output");
    die "cannot write to $opt_output: $!" if not defined $fh;
    $w_args{OUTPUT} = $fh;
}
#$w_args{encoding} = 'ISO-8859-15';
$w_args{encoding} = 'utf-8';
my $writer = new XMLTV::Writer(%w_args);
$writer->start($HEAD);

if ($mode eq 'list-channels') {
    $writer->write_channel($_) foreach @ch_all;
    $writer->end();
    exit();
}

######################################################################
# We are producing full listings.
die if $mode ne 'grab';

# Read configuration
my $line_num = 1;
foreach (@config_lines) {
    ++ $line_num;
    next if not defined;
    if (/getdescriptions:?\s+(\S+)/)
	{
		if($1 eq "yes")
		{
			$DO_SLOWER_DESC_GET = 1;
		}
    }
	elsif (/^channel:?\s+(\S+)\s+([^\#]+)/)
	{
		my $ch_did = $1;
		my $ch_name = $2;
		$ch_name =~ s/\s*$//;
		push @channels, $ch_did;
		$channels{$ch_did} = $ch_name;
    }
    else {
	warn "$config_file:$line_num: bad line\n";
    }
}

######################################################################
# begin main program

# Assume the listings source uses CET (see BUGS above).
my $now = DateCalc(parse_date('now'), "$opt_offset days");
die "No channels specified, run me with --configure\n"
  if not keys %channels;
my @to_get;


# the order in which we fetch the channels matters
foreach my $ch_did (@channels) {
    my $ch_name=$channels{$ch_did};
    my $ch_xid="$ch_did.miguiatv.com";
    $writer->write_channel({ id => $ch_xid,
			     'display-name' => [ [ encode_utf8($ch_name) ] ] });
    my $day=UnixDate($now,'%Q');
    for (my $i=0;$i<$opt_days;$i++) {
        push @to_get, [ $day, $ch_xid, $ch_did ];
        #for each day
        $day=nextday($day); die if not defined $day;
    }
}

# This progress bar is for both downloading and parsing.  Maybe
# they could be separate.
#
get_urls();
my $bar = new XMLTV::ProgressBar({name => 'getting listings', count => scalar @to_get})
  if not $opt_quiet;
foreach (@to_get) {
	foreach (process_table($_->[0], $_->[1], $_->[2])) {
		$writer->write_programme($_);
	}
	update $bar if not $opt_quiet;
}
$bar->finish() if not $opt_quiet;
$writer->end();

######################################################################
# subroutine definitions

# Use Log::TraceMessages if installed.
BEGIN {
    eval { require Log::TraceMessages };
    if ($@) {
	*t = sub {};
	*d = sub { '' };
    }
    else {
	*t = \&Log::TraceMessages::t;
	*d = \&Log::TraceMessages::d;
	Log::TraceMessages::check_argv();
    }
}

# Returns a TreeBuilder instance for a given url. The url is retrieved
# via get_nice(), decoded into a Perl string, processed to remove HTML
# entities and then parsed into a HTML::TreeBuilder object
#
sub get_tree( $ ) {
    my $url = shift;
    my $content = get_nice($url);
    $content = decode_utf8($content);
    $content = tidy_html($content);
    my $t = new HTML::TreeBuilder;
    $t->parse($content) or die "Cannot parse content of Tree\n";
    $t->eof;
    return $t;
}

# Replaces specific HTML entities with text replacements, and then 
# decodes any remaining entities in the string
#
sub tidy_html( $ ) {    
    for (my $s = shift) {
        # handle specific entities
        s/&nbsp;/ /g;
        # decode remaining entities
        decode_entities($s);
        
        return $s;
    }
}

####
# process_table: fetch a URL and process it
#
# arguments:
#    Date::Manip object giving the day to grab
#    xmltv id of channel
#    elpais.es id of channel
#
# returns: list of the programme hashes to write
#
sub process_table {

    my ($date, $ch_xmltv_id, $ch_es_id) = @_;
    my $today = UnixDate($date, '%Y%m%d');
    
   my $url = $urls{$ch_es_id};
    $url =~ s/programacion/$today/;
	debug_print "Getting $url\n";
    t $url;
    local $SIG{__WARN__} = sub 
	{
		warn "$url: $_[0]";
	};

    # parse the page to a document object
    my $tree = get_tree($url);
    #my $tree = get_nice_tree($url);
    my @program_data = get_program_data($tree);
    my $bump_start_day=0;

    my @r;
    while (@program_data) {
	my $cur = shift @program_data;
	my $next = shift @program_data;
	unshift @program_data,$next if $next;
	
	my $p = make_programme_hash($date, $ch_xmltv_id, $ch_es_id, $cur, $next);
	if (not $p) {
	    require Data::Dumper;
	    my $d = Data::Dumper::Dumper($cur);
	    warn "cannot write programme on $ch_xmltv_id on $date:\n$d\n";
	}
	else {
	    push @r, $p;
	}

	if (!$bump_start_day && bump_start_day($cur,$next)) {
	    $bump_start_day=1;
	    $date = UnixDate(DateCalc($date,"+ 1 day"),'%Q');
	}
    }
    return @r;
}


sub make_programme_hash {
    my ($date, $ch_xmltv_id, $ch_es_id, $cur, $next) = @_;

    my %prog;

    $prog{channel}=$ch_xmltv_id;
    $prog{title}=[ [ encode_utf8($cur->{title}), $LANG ] ];
    $prog{"sub-title"}=[ [ encode_utf8($cur->{subtitle}), $LANG ] ] if defined $cur->{subtitle};
    #$prog{category}=[ [ $cur->{category}, $LANG ] ];

    t "turning local time $cur->{time}, on date $date, into UTC";
    eval { $prog{start}=utc_offset("$date $cur->{time}", '+0100') };
    if ($@) {
	warn "bad time string: $cur->{time}";
	return undef;
    }
    t "...got $prog{start}";
    # FIXME: parse description field further

    $prog{desc}=[ [ encode_utf8($cur->{desc}), $LANG ] ] if defined $cur->{desc};

    return \%prog;
}
sub bump_start_day {
    my ($cur,$next) = @_;
    if (!defined($next)) {
	return undef;
    }
    my $start = UnixDate($cur->{time},'%H:%M');
    my $stop = UnixDate($next->{time},'%H:%M');
    if (Date_Cmp($start,$stop)>0) {
	return 1;
    } else {
	return 0;
    }
}


# get time, title, description
sub get_program_data 
{
    my ($tree) = @_;
    my @data;
    #my @inputs = $tree->find("class","show_even","class","show_odd");    
    my @inputs = $tree->find("tr");    
    for my $elem (@inputs) {
		if($elem->attr('class') && ($elem->attr('class') eq "show_odd" || $elem->attr('class') eq "show_even")) {
			my $time = $elem->attr('_content')->[0]->attr('_content')->[0];
			my $td  = pop @{$elem->attr('_content')};
				for my $table (@{$td->attr('_content')}) {
				   if($table->attr('_content')->[0]->attr('_content')->[0]->attr('_content')->[0]->attr('_content')->[1]) {
				       my $title = $table->attr('_content')->[0]->attr('_content')->[0]->attr('_content')->[0]->attr('_content')->[1]->attr('_content')->[0];
                    
                       if( $table->attr('_content')->[0]->attr('_content')->[1]->attr('_content')->[0]->attr('_content') ||  $table->attr('_content')->[1]->attr('_content')->[0]->attr('_content')) {
	    			       if($table->attr('_content')->[1]->attr('_content')->[0]) {
                              my $description=" ";
                              if( $table->attr('_content')->[1]->attr('_content')->[0]->attr('_content')) {
		    			        $description = $table->attr('_content')->[1]->attr('_content')->[0]->attr('_content')->[0];
                              } else {
                                $description = $table->attr('_content')->[1]->attr('_content')->[0]->attr('_content')->[0];
                              }
			    		      my %h = ( 
        		    	        	    time =>         $time,
		        	    	            category =>     $title,
		        		                title=>         $title,
        	           		    	    desc =>         $description 
    				          );
	    			   	      push @data,\%h;
		    		      }
                      }
				   }
			}
		}
    }

    return @data;


    my $xml = XMLin($tree); 
    if(ref($xml->{channel}->{item}) eq "ARRAY") {
	    my $elementos = $#{$xml->{channel}->{item}};
	    for (my $i=0;$i<$elementos;$i++) {
		    my ($title,$time) = split(/\s*-\s*/,$xml->{channel}->{item}->[$i]->{title},2);
		    my $description = $xml->{channel}->{item}->[$i]->{description};
                    ($time) = $time =~ /(\d+:\d+)/;
		    my $year = (((localtime(time))[5])+1900);
		    #$time = $year . $mes .  sprintf("%02d",$dia) . $hora . $minuto . "00 +0100";
		    $description =~ s/[^\n]*\n//;
		    if(length($description) > 5) {
			    my %h = ( 
        		            time =>         $time,
	        	            title=>         $title,
                   		    desc =>         $description 
		           );
		   	push @data,\%h;
                   }
            }
    }

    return @data;
}


# get channel listing
sub get_channels 
{
    my $bar = new XMLTV::ProgressBar({name => 'finding channels', count => 1})
	if not $opt_quiet;
    my %channels;
    my $url="http://www.miguiatv.com/todos-los-canales.html";
    t $url;
    my $channel_id;
    my $channel_name;
    my $tree = get_tree $url;
    #my $tree = get_nice_tree $url;
    my @inputs = $tree->find("div");
    foreach my $elem (@inputs) {
		if($elem->attr('class') && $elem->attr('class') eq "footer_channels") {
			
			for my $div  ( @{$elem->attr('_content')}) {
				for my $li  ( @{$div->attr('_content')}) {
					pop @{$li->attr('_content')};
					for my $ul ( @{$li->attr('_content')}) {
						if(ref($ul) eq "HTML::Element") {
							if($ul->attr('href')) {
								$channel_name = pop @{$ul->attr('_content')};
								$channel_name =~ s/^\s+//;
								$channel_name =~ s/\s+$//;
				 			        $channel_id = convert_name_to_id($channel_name);
				                                $channels{$channel_id}=$channel_name;
							}
						}
					}	
				}
			}
		}
     }

    die "no channels could be found" if not keys %channels;
    update $bar if not $opt_quiet;
    $bar->finish() if not $opt_quiet;
    return %channels;
}

# get xml list for channels
sub get_urls 
{
    my $bar = new XMLTV::ProgressBar({name => 'getting urls', count => 1})
	if not $opt_quiet;
    my %channels;
    my $url="http://www.miguiatv.com/todos-los-canales.html";
    t $url;
    my $channel_id;
    my $channel_name;
    my $tree = get_tree $url;
    #my $tree = get_nice_tree $url;
    my @inputs = $tree->find("div");
    foreach my $elem (@inputs) {
		if($elem->attr('class') && $elem->attr('class') eq "footer_channels") {
			
			for my $div  ( @{$elem->attr('_content')}) {
				for my $li  ( @{$div->attr('_content')}) {
					pop @{$li->attr('_content')};
					for my $ul ( @{$li->attr('_content')}) {
						if(ref($ul) eq "HTML::Element") {
							if($ul->attr('href')) {
								$channel_name = pop @{$ul->attr('_content')};
								$channel_name =~ s/^\s+//;
								$channel_name =~ s/\s+$//;
				 			        $channel_id = convert_name_to_id($channel_name);
				                                $urls{$channel_id}=$ul->attr('href');
							}
						}
					}	
				}
			}
		}
     }

    die "no channels could be found" if not keys %urls;

    update $bar if not $opt_quiet;
    $bar->finish() if not $opt_quiet;
}
sub convert_name_to_id
{
    my ($str) = @_;


	$str =~ s/([^A-Za-z0-9])/sprintf("-%02X", ord($1))/seg;

	$str = "C" . $str;
	return $str;
}

# Bump a DDMMYYYY date by one.
sub nextday {
    my $d = shift;
    my $p = parse_date($d);
    my $n = DateCalc($p, '+ 1 day');
    return UnixDate($n, '%Q');
}
