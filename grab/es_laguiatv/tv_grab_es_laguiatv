#!/usr/bin/perl -w

=pod

=head1 NAME

tv_grab_es_laguiatv - Alternative TV grabber for Spain.

=head1 SYNOPSIS

tv_grab_es_laguiatv --help

tv_grab_es_laguiatv [--config-file FILE] --configure [--gui OPTION]

tv_grab_es_laguiatv [--config-file FILE] [--output FILE] [--days N]
           [--offset N] [--quiet]

tv_grab_es_laguiatv --list-channels

tv_grab_es_laguiatv --capabilities

tv_grab_es_laguiatv --version

=head1 DESCRIPTION

Output TV listings for spanish channels from www.laguiatv.com.
Supports analogue and digital (D+) channels.
The grabber relies on parsing HTML so it might stop working at any time.

First run B<tv_grab_es_laguiatv --configure> to choose, which channels you want
to download. Then running B<tv_grab_es_laguiatv> with no arguments will output
listings in XML format to standard output.

B<--configure> Prompt for which channels,
and write the configuration file.

B<--config-file FILE> Set the name of the configuration file, the
default is B<~/.xmltv/tv_grab_es_laguiatv.conf>.  This is the file written by
B<--configure> and read when grabbing.

B<--gui OPTION> Use this option to enable a graphical interface to be used.
OPTION may be 'Tk', or left blank for the best available choice.
Additional allowed values of OPTION are 'Term' for normal terminal output
(default) and 'TermNoProgressBar' to disable the use of XMLTV::ProgressBar.

B<--output FILE> Write to FILE rather than standard output.

B<--days N> Grab N days.  The default is 3.

B<--offset N> Start N days in the future.  The default is to start
from today.

B<--quiet> Suppress the progress messages normally written to standard
error.

B<--capabilities> Show which capabilities the grabber supports. For more
information, see L<http://wiki.xmltv.org/index.php/XmltvCapabilities>

B<--version> Show the version of the grabber.

B<--help> Print a help message and exit.

=head1 SEE ALSO

L<xmltv(5)>.

=head1 AUTHOR

CandU, candu_sf@sourceforge.net, based on tv_grab_es, from Ramon Roca.

=head1 BUGS

=cut

# 


######################################################################
# initializations

use strict;
use XMLTV::Version '$Id: tv_grab_es_laguiatv,v 1.20 2012/01/01 18:45:43 candu_sf Exp $ ';
use XMLTV::Capabilities qw/baseline manualconfig cache/;
use XMLTV::Description 'Spain (laguiatv.com)';
use Getopt::Long;
use Date::Manip;
use HTML::TreeBuilder;
use HTML::Entities; # parse entities
use IO::File;

use LWP::Simple;

use XMLTV;
use XMLTV::Memoize;
use XMLTV::ProgressBar;
use XMLTV::Ask;
use XMLTV::Config_file;
use XMLTV::DST;
use XMLTV::Get_nice;
use XMLTV::Mode;
use XMLTV::Date;
# Todo: perhaps we should internationalize messages and docs?
use XMLTV::Usage <<END
$0: get Spanish television listings in XMLTV format
To configure: $0 --configure [--config-file FILE]
To grab listings: $0 [--config-file FILE] [--output FILE] [--days N]
        [--offset N] [--quiet]
To list channels: $0 --list-channels
To show capabilities: $0 --capabilities
To show version: $0 --version
END
  ;

# Attributes of the root element in output.
my $HEAD = { 'source-info-url'     => 'http://www.laguiatv.com/programacion.php',
	     'source-data-url'     => "http://www.laguiatv.com/programacion_vertical.php",
	     'generator-info-name' => 'XMLTV',
	     'generator-info-url'  => 'http://xmltv.org/',
	   };
		   
# Whether zero-length programmes should be included in the output.
my $WRITE_ZERO_LENGTH = 0;
my $DO_SLOWER_DESC_GET = 0;
my $CONFIG_VERSION = 1; # default to v1 (v1 doesnt have version info)
my $EXPECTED_CONFIG_VERSION = 2;

# default language
my $LANG="es";

# Global channel_data
our @ch_all;

# debug print function
sub debug_print
{
#	my ($str) = @_;
#	print "$str";
}

my @hide_channels = (
    "canal-bar.a", # currently gives 404 not found
);


######################################################################
# get options

# Get options, including undocumented --cache option.
XMLTV::Memoize::check_argv('XMLTV::Get_nice::get_nice_aux');
my ($opt_days, $opt_offset, $opt_help, $opt_output,
    $opt_configure, $opt_config_file, $opt_gui,
    $opt_quiet, $opt_list_channels);
$opt_days  = 1; # default
$opt_offset = 0; # default
$opt_quiet  = 0; # default
GetOptions('days=i'        => \$opt_days,
	   'offset=i'      => \$opt_offset,
	   'help'          => \$opt_help,
	   'configure'     => \$opt_configure,
	   'config-file=s' => \$opt_config_file,
       'gui:s'         => \$opt_gui,
	   'output=s'      => \$opt_output,
	   'quiet'         => \$opt_quiet,
	   'list-channels' => \$opt_list_channels
	  )
  or usage(0);

# Force days to be 1, since we get all days at once
$opt_days = 1;
die 'number of days must not be negative'
  if (defined $opt_days && $opt_days < 0);
usage(1) if $opt_help;

XMLTV::Ask::init($opt_gui);

my $mode = XMLTV::Mode::mode('grab', # default
			     $opt_configure => 'configure',
			     $opt_list_channels => 'list-channels',
			    );

# File that stores which channels to download.
my $config_file
  = XMLTV::Config_file::filename($opt_config_file, 'tv_grab_es_laguiatv', $opt_quiet);

my @config_lines; # used only in grab mode
if ($mode eq 'configure') {
    XMLTV::Config_file::check_no_overwrite($config_file);
}
elsif ($mode eq 'grab') {
    @config_lines = XMLTV::Config_file::read_lines($config_file);
}
elsif ($mode eq 'list-channels') {
    # Config file not used.
}
else { die }

# Whatever we are doing, we need the channels data.
my %channels; # sets @ch_all
my @channels;

my %icons;

my %categories = (
    "tag-a" => "Cine",
    "tag-b" => "Deportes",
    "tag-c" => "Programas",
    "tag-d" => "Series",
    "tag-e" => "Noticias"
);

######################################################################
# write configuration

if ($mode eq 'configure') {
    %channels = get_channels();
    
    open(CONF, ">$config_file") or die "cannot write to $config_file: $!";

    print CONF "configversion 2\n";
    # Ask about getting descs
    my $getdescs = ask_boolean("Do you want to get descriptions (very slow)");
    warn("cannot read input, using default")
        if not defined $getdescs;

    print CONF "getdescriptions ";
    print CONF "yes\n" if $getdescs;
    print CONF "no\n" if not $getdescs;

    #my $cacheicons = ask_boolean('Do you want to get and cache icons during configure', 'yes');
    #warn("cannot read input, using default")
    #    if not defined $cacheicons;

    # Ask about each channel.
    my @chs = sort { $channels{$a} cmp $channels{$b} } keys %channels;
    my @names = map { $channels{$_} } @chs;
    my @qs = map { "Add channel $_?" } @names;
    my @want = ask_many_boolean(1, @qs);

    #my $iconbar = new XMLTV::ProgressBar({name => 'getting icon urls', count => scalar @chs})
    #if ((not $opt_quiet) && $cacheicons);

    foreach (@chs) {
	my $w = shift @want;
	warn("cannot read input, stopping channel questions"), last
	  if not defined $w;
	# No need to print to user - XMLTV::Ask is verbose enough.

	# Print a config line, but comment it out if channel not wanted.
	print CONF '#' if not $w;
	my $name = shift @names;
#        if ($cacheicons)
#        {
#            my $icon = get_icon($_);
#	    print CONF "channel $_ $name icon:$icon\n";
#        }
#        else
#        {
            print CONF "channel $_ $name\n";
#        }
	# TODO don't store display-name in config file.

#        update $iconbar if ((not $opt_quiet) && $cacheicons);
    }

    close CONF or warn "cannot close $config_file: $!";
    say("Finished configuration.");

    exit();
}


# Not configuration, we must be writing something, either full
# listings or just channels.
#
die if $mode ne 'grab' and $mode ne 'list-channels';

# Options to be used for XMLTV::Writer.
my %w_args;
if (defined $opt_output) {
    my $fh = new IO::File(">$opt_output");
    die "cannot write to $opt_output: $!" if not defined $fh;
    $w_args{OUTPUT} = $fh;
}
$w_args{encoding} = 'ISO-8859-1';
my $writer = new XMLTV::Writer(%w_args);
$writer->start($HEAD);

if ($mode eq 'list-channels') {
    $writer->write_channel($_) foreach @ch_all;
    $writer->end();
    exit();
}

######################################################################
# We are producing full listings.
die if $mode ne 'grab';

# Read configuration
my $line_num = 1;
foreach (@config_lines) {
    ++ $line_num;
    next if not defined;

    if (/configversion:?\s+(\S+)/)
    {
        $CONFIG_VERSION = $1;
    }
    elsif (/getdescriptions:?\s+(\S+)/)
    {
        if("$CONFIG_VERSION" ne "$EXPECTED_CONFIG_VERSION")
        {
            die "Config file is out of date, please rerun with --configure\n";
        }
        if($1 eq "yes")
        {
            $DO_SLOWER_DESC_GET = 1;
        }
    }
    elsif (/^channel:?\s+(\S+)\s+([^#]+)icon\:([^#]+)/)
    {
        my $ch_did = $1;
        my $ch_name = $2;
        my $ch_icon = $3;


        #debug_print "Got channel $ch_name icon $ch_icon\n";
        $ch_name =~ s/\s*$//;
        push @channels, $ch_did;
        $channels{$ch_did} = $ch_name;
        $icons{$ch_did} = $ch_icon;
    }
    elsif (/^channel:?\s+(\S+)\s+([^#]+)/)
    {
        my $ch_did = $1;
        my $ch_name = $2;

        #debug_print "Got channel $ch_name icon $ch_icon\n";
        $ch_name =~ s/\s*$//;
        push @channels, $ch_did;
        $channels{$ch_did} = $ch_name;
    }
    else {
	warn "$config_file:$line_num: bad line\n";
    }
}

######################################################################
# begin main program

# Assume the listings source uses CET (see BUGS above).
my $now = DateCalc(parse_date('now'), "$opt_offset days");
die "No channels specified, run me with --configure\n"
  if not keys %channels;
my @to_get;

my $iconbar = new XMLTV::ProgressBar({name => 'getting channel info', count => scalar @channels})
  if not $opt_quiet;
# the order in which we fetch the channels matters
foreach my $ch_did (@channels) {
    my $ch_name=$channels{$ch_did};
    my $ch_xid="$ch_did.laguiatv.com";
#    my $ch_icon=$icons{$ch_did};
#    if (!$ch_icon)
#    {
#        $ch_icon = get_icon($ch_did);
#    }
#
#    if(index($ch_icon, "shim.gif") < 0)
#    {
#		$writer->write_channel({ id => $ch_xid,
#					 'display-name' => [ [ $ch_name ] ] ,
#					 'icon' => [ { 'src' => $ch_icon } ] });
#	}
#	else
#	{
		$writer->write_channel({ id => $ch_xid,
					 'display-name' => [ [ $ch_name ] ] });
#	}
    my $day=UnixDate($now,'%Q');
    for (my $i=0;$i<$opt_days;$i++) {
        push @to_get, [ $day, $ch_xid, $ch_did ];
        #for each day
        $day=nextday($day); die if not defined $day;
    }
	update $iconbar if not $opt_quiet;
}

# This progress bar is for both downloading and parsing.  Maybe
# they could be separate.
#
my $bar = new XMLTV::ProgressBar({name => 'getting listings', count => scalar @to_get})
  if not $opt_quiet;
foreach (@to_get) {
	debug_print("process $_->[0], $_->[1], $_->[2]\n");
	foreach (process_table($_->[0], $_->[1], $_->[2])) {
		$writer->write_programme($_);
	}
	update $bar if not $opt_quiet;
}
$bar->finish() if not $opt_quiet;
$writer->end();

######################################################################
# subroutine definitions

# Use Log::TraceMessages if installed.
BEGIN {
    eval { require Log::TraceMessages };
    if ($@) {
	*t = sub {};
	*d = sub { '' };
    }
    else {
	*t = \&Log::TraceMessages::t;
	*d = \&Log::TraceMessages::d;
	Log::TraceMessages::check_argv();
    }
}

####
# process_table: fetch a URL and process it
#
# arguments:
#    Date::Manip object giving the day to grab
#    xmltv id of channel
#    elpais.es id of channel
#
# returns: list of the programme hashes to write
#
sub process_table {

    my ($date, $ch_xmltv_id, $ch_es_id) = @_;
	my $ch_conv_id = convert_id_to_laguiatvid($ch_es_id);
    my $today = UnixDate($date, '%d/%m/%Y');

    my $url = "http://www.laguiatv.com/programacion/$ch_es_id";
	debug_print "Getting $url\n";
    t $url;
    local $SIG{__WARN__} = sub 
	{
		warn "$url: $_[0]";
	};

    # parse the page to a document object
    my $tree = get_nice_tree $url;
    my @program_data = get_program_data($tree);
    my $bump_start_day=0;

    my @r;
    while (@program_data) {
	my $cur = shift @program_data;
	my $next = shift @program_data;
	unshift @program_data,$next if $next;
	
	my $p = make_programme_hash($date, $ch_xmltv_id, $ch_es_id, $cur, $next);
	if (not $p) {
	    require Data::Dumper;
	    my $d = Data::Dumper::Dumper($cur);
	    warn "cannot write programme on $ch_xmltv_id on $date:\n$d\n";
	}
	else {
	    push @r, $p;
	}

	if (!$bump_start_day && bump_start_day($cur,$next)) {
	    #$bump_start_day=1;
	    $date = UnixDate(DateCalc($date,"+ 1 day"),'%Q');
	}
    }
    return @r;
}

sub make_programme_hash {
    my ($date, $ch_xmltv_id, $ch_es_id, $cur, $next) = @_;

    my %prog;

    $prog{channel}=$ch_xmltv_id;
    $prog{title}=[ [ $cur->{title}, $LANG ] ];
    $prog{"sub-title"}=[ [ $cur->{subtitle}, $LANG ] ] if defined $cur->{subtitle};
    # $prog{category}=[ [ $cur->{category}, $LANG ] ];

    t "turning local time $cur->{time}, on date $date, into UTC";
    eval { $prog{start}=utc_offset("$date $cur->{time}", '+0100') };
    if ($@) {
	warn "bad time string: $cur->{time}";
	return undef;
    }
    t "...got $prog{start}";
    # FIXME: parse description field further

    $prog{desc}=[ [ $cur->{desc}, $LANG ] ] if defined $cur->{desc};
    $prog{category}=[ [ $cur->{category}, $LANG ] ] if defined $cur->{category};
    return \%prog;
}
sub bump_start_day {
    my ($cur,$next) = @_;
    if (!defined($next)) {
	return undef;
    }
    my $start = UnixDate($cur->{time},'%H:%M');
    my $stop = UnixDate($next->{time},'%H:%M');
    if (Date_Cmp($start,$stop)>0) {
	return 1;
    } else {
	return 0;
    }
}


#
sub get_program_data 
{
    my ($tree) = @_;
    my @data;

    # find schedule table

    my @divs = $tree->find_by_tag_name("_tag"=>"div");

    foreach my $div (@divs)
    {
        my $class = $div->attr('class');
		
        if ($class && $class eq "clip")
        {
            debug_print("Got clip\n");
            my $p_category = "";

            my @litems = $div->find_by_tag_name("_tag"=>"li"); 
            foreach my $litem (@litems)
            {
                $p_category = $litem->attr('class');
            }

            my @links = $div->find_by_tag_name("_tag"=>"a");

            foreach my $link (@links)
            {
                my @txts = get_txt_elems($link);
                my $p_title = $txts[0];
                my ($p_stime, $ignore, $p_etime) = split(/\ /, $txts[1]);
                my $p_description = "";

                debug_print("title: $p_title start: $p_stime end: $p_etime cat: $p_category c2: " . $categories{$p_category} . "\n");
                if($p_title && $p_title ne "" && $p_stime && $p_stime ne "")
                {
                    my %h = (time =>        $p_stime,
                             title=>        $p_title);

                    if($p_category && $p_category ne "")
                    {
                        my $cat = $categories{$p_category};
                        if($cat && $cat ne "")
                        {
                            $h{category} = $cat;
                        }
                    }
                    $h{desc} = $p_description if $p_description ne "";

                    push @data, \%h;

                    $p_title = "";
                    $p_stime = "";
                    $p_category = "";
                }
            }
        }
    }
    return @data;
}

sub get_icon 
{
    my ($ch_did) = @_;

    return "";
	
    my $url = "http://www.laguiatv.com/programacion/$ch_did";
	debug_print "Getting $url\n";
    t $url;
    local $SIG{__WARN__} = sub 
	{
		warn "$url: $_[0]";
	};

    my $content = get $url;
    my $pos = index($content, '<table class="grid cadena">');
    if($pos > 0)
    {
        $pos = index($content, '<img src="', $pos);
        if($pos > 0)
        {
            $pos += 10;
            my $end = index($content, '"', $pos);

            my $icon = 'http://www.laguiatv.com/' . substr($content, $pos, $end - $pos);

            debug_print "icon $icon\n";
            return $icon;
        }
    }

    return 'http://www.laguiatv.com/shim.gif';
}


sub get_prog_info
{
    my ($url) = @_;
    my $desc = "";
    my $cat = "";

    $url = "http://www.laguiatv.com/".$url;
    debug_print "Get proginfo $url\n";	

    my $content = get $url;
    my $pos = index($content, '<div class="intro-datasheet">');
    
    if($pos >= 0)
    {
        $pos = index($content, 'class="text">', $pos);
        if($pos >= 0)
        {
            my $divend = index($content, '</div', $pos);
            $pos = index($content, '<p', $pos);
	
            while($pos >= 0 && $pos < $divend)
            {
                $pos = index($content, '>', $pos) + 1;
                my $end = index($content, '</p>', $pos);
                if($end >= 0)
                {
                    $desc = $desc . substr($content, $pos, $end - $pos) . " ";
                }
                $pos = index($content, '<p', $pos);
            }
        }
    }

    decode_entities($desc);
    $desc =~ s/<\S+\s*\/*\/*>//g;
    $desc =~ s/\s+/ /g;
    $desc =~ s/\s+$//g;

    return ($desc, $cat);
}

sub get_txt_elems {
    my ($tree) = @_;

    my @txt_elem;
    my @txt_cont = $tree->look_down(
                        sub { ($_[0]->descendants() eq 0  ) },       
			sub { defined($_[0]->attr ("_content") ) } );
	foreach my $txt (@txt_cont) {
        	my @children=$txt->content_list;
		if (defined($children[0])) {
                  for (my $tmp=$children[0]) {
			s/^\s+//;s/\s+$//;
			push @txt_elem, $_;
                      }
                }
	}
    return @txt_elem;
}

# get channel listing
sub get_channels 
{
    my $bar = new XMLTV::ProgressBar({name => 'finding channels', count => 1})
	if not $opt_quiet;
    my %channels;
    my $url="http://www.laguiatv.com/programacion";
    t $url;

    my $channel_id;
    my $channel_name;
    my $elem;

    my $tree = get_nice_tree $url;

    my @uls = $tree->find_by_tag_name("_tag"=>"ul");

    foreach my $ul (@uls) 
    {
        my $uclass = $ul->attr('class');
        if ($uclass && $uclass eq 'channel-list')
        {
            my @links = $ul->find_by_tag_name("_tag"=>"a");

            # <a href="/programacion/intereconomia" title="Intereconomía">
            foreach my $link (@links) 
            {
                $channel_name = $link->attr('title');
                $channel_id = $link->attr('href');

                $channel_id =~ s/^\/programacion\///;

                my $hide = 0;
                foreach my $hide_id (@hide_channels)
                {
                    if($channel_id =~ m/$hide_id/)
                    {
                        $hide = 1;
                    }
                }

                if($hide == 0)
                { 
                    $channels{$channel_id}=$channel_name;
                    print("Got channel $channel_name with id $channel_id\n");
                }
            }
        }
    }

    # remove channels that should not be listed


    die "no channels could be found" if not keys %channels;
    update $bar if not $opt_quiet;
    $bar->finish() if not $opt_quiet;
    return %channels;
}

sub convert_laguiatvid_to_id
{
    my ($str) = @_;


	$str =~ s/([^A-Za-z0-9])/sprintf("-%02X", ord("$1"))/seg;

	$str = "C" . $str;
	return $str;
}

sub convert_id_to_laguiatvid
{
    my ($str) = @_;

	# convert -20 to + (to replace spaces)
	$str =~ s/-20/+/g;

	# convert - to % for URL encoded chars
	$str =~ s/\-/%/g;

	# strip the C off the front
	$str = substr($str, 1);

	return $str;
}

# Bump a DDMMYYYY date by one.
sub nextday {
    my $d = shift;
    my $p = parse_date($d);
    my $n = DateCalc($p, '+ 1 day');
    return UnixDate($n, '%Q');
}
